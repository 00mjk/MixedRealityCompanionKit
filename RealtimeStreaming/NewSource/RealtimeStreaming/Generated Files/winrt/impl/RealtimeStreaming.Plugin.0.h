// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180227.3

#pragma once

WINRT_EXPORT namespace winrt::RealtimeStreaming::Plugin {

enum class DeviceType : int32_t
{
    Null = 0,
    DX11 = 1,
    Warp = 2,
};

struct IDirectXManager;
struct IModule;
struct IModuleFactory;
struct IModuleManager;
struct IPluginManager;
struct DirectXManager;
struct Module;
struct ModuleManager;
struct PluginManager;

}

namespace winrt::impl {

template <> struct category<RealtimeStreaming::Plugin::IDirectXManager>{ using type = interface_category; };
template <> struct category<RealtimeStreaming::Plugin::IModule>{ using type = interface_category; };
template <> struct category<RealtimeStreaming::Plugin::IModuleFactory>{ using type = interface_category; };
template <> struct category<RealtimeStreaming::Plugin::IModuleManager>{ using type = interface_category; };
template <> struct category<RealtimeStreaming::Plugin::IPluginManager>{ using type = interface_category; };
template <> struct category<RealtimeStreaming::Plugin::DirectXManager>{ using type = class_category; };
template <> struct category<RealtimeStreaming::Plugin::Module>{ using type = class_category; };
template <> struct category<RealtimeStreaming::Plugin::ModuleManager>{ using type = class_category; };
template <> struct category<RealtimeStreaming::Plugin::PluginManager>{ using type = class_category; };
template <> struct category<RealtimeStreaming::Plugin::DeviceType>{ using type = enum_category; };
template <> struct name<RealtimeStreaming::Plugin::IDirectXManager>{ static constexpr auto & value{ L"RealtimeStreaming.Plugin.IDirectXManager" }; };
template <> struct name<RealtimeStreaming::Plugin::IModule>{ static constexpr auto & value{ L"RealtimeStreaming.Plugin.IModule" }; };
template <> struct name<RealtimeStreaming::Plugin::IModuleFactory>{ static constexpr auto & value{ L"RealtimeStreaming.Plugin.IModuleFactory" }; };
template <> struct name<RealtimeStreaming::Plugin::IModuleManager>{ static constexpr auto & value{ L"RealtimeStreaming.Plugin.IModuleManager" }; };
template <> struct name<RealtimeStreaming::Plugin::IPluginManager>{ static constexpr auto & value{ L"RealtimeStreaming.Plugin.IPluginManager" }; };
template <> struct name<RealtimeStreaming::Plugin::DirectXManager>{ static constexpr auto & value{ L"RealtimeStreaming.Plugin.DirectXManager" }; };
template <> struct name<RealtimeStreaming::Plugin::Module>{ static constexpr auto & value{ L"RealtimeStreaming.Plugin.Module" }; };
template <> struct name<RealtimeStreaming::Plugin::ModuleManager>{ static constexpr auto & value{ L"RealtimeStreaming.Plugin.ModuleManager" }; };
template <> struct name<RealtimeStreaming::Plugin::PluginManager>{ static constexpr auto & value{ L"RealtimeStreaming.Plugin.PluginManager" }; };
template <> struct name<RealtimeStreaming::Plugin::DeviceType>{ static constexpr auto & value{ L"RealtimeStreaming.Plugin.DeviceType" }; };
template <> struct guid<RealtimeStreaming::Plugin::IDirectXManager>{ static constexpr GUID value{ 0x42E42F0F,0x4CA4,0x56F5,{ 0x92,0x14,0x97,0x4A,0xBE,0xC8,0xB0,0xC2 } }; };
template <> struct guid<RealtimeStreaming::Plugin::IModule>{ static constexpr GUID value{ 0x2EDEB3FB,0x8008,0x4A13,{ 0xB8,0xD3,0x70,0x81,0xFD,0x11,0x44,0x3F } }; };
template <> struct guid<RealtimeStreaming::Plugin::IModuleFactory>{ static constexpr GUID value{ 0x1D81174E,0x2DC0,0x11E9,{ 0xB2,0x10,0xD6,0x63,0xBD,0x87,0x3D,0x93 } }; };
template <> struct guid<RealtimeStreaming::Plugin::IModuleManager>{ static constexpr GUID value{ 0xED7CA192,0x2E9D,0x11E9,{ 0xB2,0x10,0xD6,0x63,0xBD,0x87,0x3D,0x93 } }; };
template <> struct guid<RealtimeStreaming::Plugin::IPluginManager>{ static constexpr GUID value{ 0x2C02447D,0x0A34,0x5395,{ 0xAF,0x8C,0x51,0x36,0xFC,0x01,0x9E,0xAD } }; };
template <> struct default_interface<RealtimeStreaming::Plugin::DirectXManager>{ using type = RealtimeStreaming::Plugin::IDirectXManager; };
template <> struct default_interface<RealtimeStreaming::Plugin::Module>{ using type = RealtimeStreaming::Plugin::IModule; };
template <> struct default_interface<RealtimeStreaming::Plugin::ModuleManager>{ using type = RealtimeStreaming::Plugin::IModuleManager; };
template <> struct default_interface<RealtimeStreaming::Plugin::PluginManager>{ using type = RealtimeStreaming::Plugin::IPluginManager; };

template <typename D>
struct consume_RealtimeStreaming_Plugin_IDirectXManager
{
    void Lost() const;
    void Reset() const;
};
template <> struct consume<RealtimeStreaming::Plugin::IDirectXManager> { template <typename D> using type = consume_RealtimeStreaming_Plugin_IDirectXManager<D>; };

template <typename D>
struct consume_RealtimeStreaming_Plugin_IModule
{
    void Shutdown() const;
};
template <> struct consume<RealtimeStreaming::Plugin::IModule> { template <typename D> using type = consume_RealtimeStreaming_Plugin_IModule<D>; };

template <typename D>
struct consume_RealtimeStreaming_Plugin_IModuleFactory
{
};
template <> struct consume<RealtimeStreaming::Plugin::IModuleFactory> { template <typename D> using type = consume_RealtimeStreaming_Plugin_IModuleFactory<D>; };

template <typename D>
struct consume_RealtimeStreaming_Plugin_IModuleManager
{
    uint32_t AddModule(RealtimeStreaming::Plugin::Module const& pluginModule) const;
    RealtimeStreaming::Plugin::Module GetModule(uint32_t moduleHandle) const;
    void ReleaseModule(uint32_t moduleHandle) const;
};
template <> struct consume<RealtimeStreaming::Plugin::IModuleManager> { template <typename D> using type = consume_RealtimeStreaming_Plugin_IModuleManager<D>; };

template <typename D>
struct consume_RealtimeStreaming_Plugin_IPluginManager
{
    RealtimeStreaming::Plugin::ModuleManager ModuleManager() const;
    RealtimeStreaming::Plugin::DirectXManager DirectXManager() const;
};
template <> struct consume<RealtimeStreaming::Plugin::IPluginManager> { template <typename D> using type = consume_RealtimeStreaming_Plugin_IPluginManager<D>; };

template <> struct abi<RealtimeStreaming::Plugin::IDirectXManager>{ struct type : IInspectable
{
    virtual HRESULT __stdcall Lost() noexcept = 0;
    virtual HRESULT __stdcall Reset() noexcept = 0;
};};

template <> struct abi<RealtimeStreaming::Plugin::IModule>{ struct type : IInspectable
{
    virtual HRESULT __stdcall Shutdown() noexcept = 0;
};};

template <> struct abi<RealtimeStreaming::Plugin::IModuleFactory>{ struct type : IInspectable
{
};};

template <> struct abi<RealtimeStreaming::Plugin::IModuleManager>{ struct type : IInspectable
{
    virtual HRESULT __stdcall AddModule(void* pluginModule, uint32_t* result) noexcept = 0;
    virtual HRESULT __stdcall GetModule(uint32_t moduleHandle, void** result) noexcept = 0;
    virtual HRESULT __stdcall ReleaseModule(uint32_t moduleHandle) noexcept = 0;
};};

template <> struct abi<RealtimeStreaming::Plugin::IPluginManager>{ struct type : IInspectable
{
    virtual HRESULT __stdcall get_ModuleManager(void** result) noexcept = 0;
    virtual HRESULT __stdcall get_DirectXManager(void** result) noexcept = 0;
};};

}
