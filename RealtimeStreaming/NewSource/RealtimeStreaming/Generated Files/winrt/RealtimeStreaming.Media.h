// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180227.3

#pragma once
#include "winrt/base.h"

WINRT_WARNING_PUSH

static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.180227.3"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/impl/RealtimeStreaming.Network.2.h"
#include "winrt/impl/Windows.Foundation.Collections.2.h"
#include "winrt/impl/Windows.Media.Core.2.h"
#include "winrt/impl/Windows.Media.MediaProperties.2.h"
#include "winrt/impl/RealtimeStreaming.Plugin.2.h"
#include "winrt/impl/Windows.Media.2.h"
#include "winrt/impl/RealtimeStreaming.Media.2.h"
#include "winrt/RealtimeStreaming.h"

namespace winrt::impl {

template <typename D> event_token consume_RealtimeStreaming_Media_INetworkMediaSink<D>::Closed(Windows::Foundation::EventHandler<bool> const& handler) const
{
    event_token token{};
    check_hresult(WINRT_SHIM(RealtimeStreaming::Media::INetworkMediaSink)->add_Closed(get_abi(handler), put_abi(token)));
    return token;
}

template <typename D> event_revoker<RealtimeStreaming::Media::INetworkMediaSink> consume_RealtimeStreaming_Media_INetworkMediaSink<D>::Closed(auto_revoke_t, Windows::Foundation::EventHandler<bool> const& handler) const
{
    return impl::make_event_revoker<D, RealtimeStreaming::Media::INetworkMediaSink>(this, &abi_t<RealtimeStreaming::Media::INetworkMediaSink>::remove_Closed, Closed(handler));
}

template <typename D> void consume_RealtimeStreaming_Media_INetworkMediaSink<D>::Closed(event_token const& token) const
{
    check_hresult(WINRT_SHIM(RealtimeStreaming::Media::INetworkMediaSink)->remove_Closed(get_abi(token)));
}

template <typename D> HRESULT consume_RealtimeStreaming_Media_INetworkMediaSink<D>::OnEndOfStream(uint32_t streamId) const
{
    HRESULT result{};
    check_hresult(WINRT_SHIM(RealtimeStreaming::Media::INetworkMediaSink)->OnEndOfStream(streamId, put_abi(result)));
    return result;
}

template <typename D> HRESULT consume_RealtimeStreaming_Media_INetworkMediaSink<D>::HandleError(HRESULT const& hr) const
{
    HRESULT result{};
    check_hresult(WINRT_SHIM(RealtimeStreaming::Media::INetworkMediaSink)->HandleError(get_abi(hr), put_abi(result)));
    return result;
}

template <typename D> HRESULT consume_RealtimeStreaming_Media_INetworkMediaSink<D>::CheckShutdown() const
{
    HRESULT result{};
    check_hresult(WINRT_SHIM(RealtimeStreaming::Media::INetworkMediaSink)->CheckShutdown(put_abi(result)));
    return result;
}

template <typename D> HRESULT consume_RealtimeStreaming_Media_INetworkMediaSink<D>::SendDescription() const
{
    HRESULT result{};
    check_hresult(WINRT_SHIM(RealtimeStreaming::Media::INetworkMediaSink)->SendDescription(put_abi(result)));
    return result;
}

template <typename D> HRESULT consume_RealtimeStreaming_Media_INetworkMediaSinkStream<D>::Start(int64_t start) const
{
    HRESULT result{};
    check_hresult(WINRT_SHIM(RealtimeStreaming::Media::INetworkMediaSinkStream)->Start(start, put_abi(result)));
    return result;
}

template <typename D> HRESULT consume_RealtimeStreaming_Media_INetworkMediaSinkStream<D>::Restart() const
{
    HRESULT result{};
    check_hresult(WINRT_SHIM(RealtimeStreaming::Media::INetworkMediaSinkStream)->Restart(put_abi(result)));
    return result;
}

template <typename D> HRESULT consume_RealtimeStreaming_Media_INetworkMediaSinkStream<D>::Stop() const
{
    HRESULT result{};
    check_hresult(WINRT_SHIM(RealtimeStreaming::Media::INetworkMediaSinkStream)->Stop(put_abi(result)));
    return result;
}

template <typename D> HRESULT consume_RealtimeStreaming_Media_INetworkMediaSinkStream<D>::Pause() const
{
    HRESULT result{};
    check_hresult(WINRT_SHIM(RealtimeStreaming::Media::INetworkMediaSinkStream)->Pause(put_abi(result)));
    return result;
}

template <typename D> HRESULT consume_RealtimeStreaming_Media_INetworkMediaSinkStream<D>::Shutdown() const
{
    HRESULT result{};
    check_hresult(WINRT_SHIM(RealtimeStreaming::Media::INetworkMediaSinkStream)->Shutdown(put_abi(result)));
    return result;
}

template <typename D> Windows::Foundation::IAsyncAction consume_RealtimeStreaming_Media_IRealtimeMediaSource<D>::InitAsync(RealtimeStreaming::Network::Connection const& connection) const
{
    Windows::Foundation::IAsyncAction operation{ nullptr };
    check_hresult(WINRT_SHIM(RealtimeStreaming::Media::IRealtimeMediaSource)->InitAsync(get_abi(connection), put_abi(operation)));
    return operation;
}

template <typename D> Windows::Media::Core::MediaStreamSource consume_RealtimeStreaming_Media_IRealtimeMediaSource<D>::MediaStreamSource() const
{
    Windows::Media::Core::MediaStreamSource result{ nullptr };
    check_hresult(WINRT_SHIM(RealtimeStreaming::Media::IRealtimeMediaSource)->get_MediaStreamSource(put_abi(result)));
    return result;
}

template <typename D> Windows::Media::MediaProperties::VideoEncodingProperties consume_RealtimeStreaming_Media_IRealtimeMediaSource<D>::VideoProperties() const
{
    Windows::Media::MediaProperties::VideoEncodingProperties result{ nullptr };
    check_hresult(WINRT_SHIM(RealtimeStreaming::Media::IRealtimeMediaSource)->get_VideoProperties(put_abi(result)));
    return result;
}

template <typename D> void consume_RealtimeStreaming_Media_IRealtimeServer<D>::WriteFrame(uint32_t bufferSize, array_view<uint8_t const> pBuffer) const
{
    check_hresult(WINRT_SHIM(RealtimeStreaming::Media::IRealtimeServer)->WriteFrame(bufferSize, pBuffer.size(), get_abi(pBuffer)));
}

template <typename D> Windows::Media::MediaProperties::VideoEncodingProperties consume_RealtimeStreaming_Media_IRealtimeServer<D>::VideoProperties() const
{
    Windows::Media::MediaProperties::VideoEncodingProperties result{ nullptr };
    check_hresult(WINRT_SHIM(RealtimeStreaming::Media::IRealtimeServer)->get_VideoProperties(put_abi(result)));
    return result;
}

template <typename D> RealtimeStreaming::Media::RealtimeServer consume_RealtimeStreaming_Media_IRealtimeServerFactory<D>::CreateInstance(RealtimeStreaming::Network::Connection const& connection, GUID const& inputMediaType, Windows::Media::MediaProperties::MediaEncodingProfile const& mediaEncodingProperties) const
{
    RealtimeStreaming::Media::RealtimeServer value{ nullptr };
    check_hresult(WINRT_SHIM(RealtimeStreaming::Media::IRealtimeServerFactory)->CreateInstance(get_abi(connection), get_abi(inputMediaType), get_abi(mediaEncodingProperties), put_abi(value)));
    return value;
}

template <typename D>
struct produce<D, RealtimeStreaming::Media::INetworkMediaSink> : produce_base<D, RealtimeStreaming::Media::INetworkMediaSink>
{
    HRESULT __stdcall add_Closed(void* handler, event_token* token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *token = detach_from<event_token>(this->shim().Closed(*reinterpret_cast<Windows::Foundation::EventHandler<bool> const*>(&handler)));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall remove_Closed(event_token token) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Closed(*reinterpret_cast<event_token const*>(&token));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall OnEndOfStream(uint32_t streamId, HRESULT* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<HRESULT>(this->shim().OnEndOfStream(streamId));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall HandleError(HRESULT hr, HRESULT* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<HRESULT>(this->shim().HandleError(*reinterpret_cast<HRESULT const*>(&hr)));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall CheckShutdown(HRESULT* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<HRESULT>(this->shim().CheckShutdown());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall SendDescription(HRESULT* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<HRESULT>(this->shim().SendDescription());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

template <typename D>
struct produce<D, RealtimeStreaming::Media::INetworkMediaSinkStream> : produce_base<D, RealtimeStreaming::Media::INetworkMediaSinkStream>
{
    HRESULT __stdcall Start(int64_t start, HRESULT* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<HRESULT>(this->shim().Start(start));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall Restart(HRESULT* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<HRESULT>(this->shim().Restart());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall Stop(HRESULT* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<HRESULT>(this->shim().Stop());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall Pause(HRESULT* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<HRESULT>(this->shim().Pause());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall Shutdown(HRESULT* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<HRESULT>(this->shim().Shutdown());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

template <typename D>
struct produce<D, RealtimeStreaming::Media::IRealtimeMediaSource> : produce_base<D, RealtimeStreaming::Media::IRealtimeMediaSource>
{
    HRESULT __stdcall InitAsync(void* connection, void** operation) noexcept final
    {
        try
        {
            *operation = nullptr;
            typename D::abi_guard guard(this->shim());
            *operation = detach_from<Windows::Foundation::IAsyncAction>(this->shim().InitAsync(*reinterpret_cast<RealtimeStreaming::Network::Connection const*>(&connection)));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall get_MediaStreamSource(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Windows::Media::Core::MediaStreamSource>(this->shim().MediaStreamSource());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall get_VideoProperties(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Windows::Media::MediaProperties::VideoEncodingProperties>(this->shim().VideoProperties());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

template <typename D>
struct produce<D, RealtimeStreaming::Media::IRealtimeServer> : produce_base<D, RealtimeStreaming::Media::IRealtimeServer>
{
    HRESULT __stdcall WriteFrame(uint32_t bufferSize, uint32_t __pBufferSize, uint8_t* pBuffer) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().WriteFrame(bufferSize, array_view<uint8_t const>(reinterpret_cast<uint8_t const *>(pBuffer), reinterpret_cast<uint8_t const *>(pBuffer) + __pBufferSize));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall get_VideoProperties(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Windows::Media::MediaProperties::VideoEncodingProperties>(this->shim().VideoProperties());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

template <typename D>
struct produce<D, RealtimeStreaming::Media::IRealtimeServerFactory> : produce_base<D, RealtimeStreaming::Media::IRealtimeServerFactory>
{
    HRESULT __stdcall CreateInstance(void* connection, GUID inputMediaType, void* mediaEncodingProperties, void** value) noexcept final
    {
        try
        {
            *value = nullptr;
            typename D::abi_guard guard(this->shim());
            *value = detach_from<RealtimeStreaming::Media::RealtimeServer>(this->shim().CreateInstance(*reinterpret_cast<RealtimeStreaming::Network::Connection const*>(&connection), *reinterpret_cast<GUID const*>(&inputMediaType), *reinterpret_cast<Windows::Media::MediaProperties::MediaEncodingProfile const*>(&mediaEncodingProperties)));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

}

WINRT_EXPORT namespace winrt::RealtimeStreaming::Media {

inline RealtimeMediaSource::RealtimeMediaSource() :
    RealtimeMediaSource(get_activation_factory<RealtimeMediaSource>().ActivateInstance<RealtimeMediaSource>())
{}

inline RealtimeServer::RealtimeServer(RealtimeStreaming::Network::Connection const& connection, GUID const& inputMediaType, Windows::Media::MediaProperties::MediaEncodingProfile const& mediaEncodingProperties) :
    RealtimeServer(get_activation_factory<RealtimeServer, RealtimeStreaming::Media::IRealtimeServerFactory>().CreateInstance(connection, inputMediaType, mediaEncodingProperties))
{}

}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::RealtimeStreaming::Media::INetworkMediaSink> : winrt::impl::hash_base<winrt::RealtimeStreaming::Media::INetworkMediaSink> {};
template<> struct hash<winrt::RealtimeStreaming::Media::INetworkMediaSinkStream> : winrt::impl::hash_base<winrt::RealtimeStreaming::Media::INetworkMediaSinkStream> {};
template<> struct hash<winrt::RealtimeStreaming::Media::IRealtimeMediaSource> : winrt::impl::hash_base<winrt::RealtimeStreaming::Media::IRealtimeMediaSource> {};
template<> struct hash<winrt::RealtimeStreaming::Media::IRealtimeServer> : winrt::impl::hash_base<winrt::RealtimeStreaming::Media::IRealtimeServer> {};
template<> struct hash<winrt::RealtimeStreaming::Media::IRealtimeServerFactory> : winrt::impl::hash_base<winrt::RealtimeStreaming::Media::IRealtimeServerFactory> {};
template<> struct hash<winrt::RealtimeStreaming::Media::NetworkMediaSink> : winrt::impl::hash_base<winrt::RealtimeStreaming::Media::NetworkMediaSink> {};
template<> struct hash<winrt::RealtimeStreaming::Media::NetworkMediaSinkStream> : winrt::impl::hash_base<winrt::RealtimeStreaming::Media::NetworkMediaSinkStream> {};
template<> struct hash<winrt::RealtimeStreaming::Media::RealtimeMediaSource> : winrt::impl::hash_base<winrt::RealtimeStreaming::Media::RealtimeMediaSource> {};
template<> struct hash<winrt::RealtimeStreaming::Media::RealtimeServer> : winrt::impl::hash_base<winrt::RealtimeStreaming::Media::RealtimeServer> {};

}

WINRT_WARNING_POP
