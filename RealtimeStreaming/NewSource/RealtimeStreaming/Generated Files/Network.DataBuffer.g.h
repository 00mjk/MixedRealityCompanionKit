// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180821.2

#pragma once

#include "winrt/RealtimeStreaming.Common.h"
#include "winrt/Windows.Networking.Sockets.h"
#include "winrt/RealtimeStreaming.Plugin.h"
#include "winrt/Windows.Storage.Streams.h"
#include "winrt/RealtimeStreaming.Network.h"

namespace winrt::RealtimeStreaming::Network::implementation {

template <typename D, typename... I>
struct WINRT_EBO DataBuffer_base : implements<D, RealtimeStreaming::Network::IDataBuffer, Windows::Storage::Streams::IBuffer, I...>
{
    using base_type = DataBuffer_base;
    using class_type = RealtimeStreaming::Network::DataBuffer;
    using implements_type = typename DataBuffer_base::implements_type;
    using implements_type::implements_type;
    
#if _MSC_VER < 1914
    operator class_type() const noexcept
    {
        static_assert(std::is_same_v<typename impl::implements_default_interface<D>::type, default_interface<class_type>>);
        class_type result{ nullptr };
        attach_abi(result, detach_abi(static_cast<default_interface<class_type>>(*this)));
        return result;
    }
#else
    operator impl::producer_ref<class_type> const() const noexcept
    {
        return { to_abi<default_interface<class_type>>(this) };
    }
#endif

    hstring GetRuntimeClassName() const
    {
        return L"RealtimeStreaming.Network.DataBuffer";
    }
};

}

namespace winrt::RealtimeStreaming::Network::factory_implementation {

template <typename D, typename T, typename... I>
struct WINRT_EBO DataBufferT : implements<D, Windows::Foundation::IActivationFactory, RealtimeStreaming::Network::IDataBufferFactory, I...>
{
    using instance_type = RealtimeStreaming::Network::DataBuffer;

    hstring GetRuntimeClassName() const
    {
        return L"RealtimeStreaming.Network.DataBuffer";
    }

    Windows::Foundation::IInspectable ActivateInstance() const
    {
        throw hresult_not_implemented();
    }

    RealtimeStreaming::Network::DataBuffer CreateInstance(uint64_t size)
    {
        return make<T>(size);
    }
};

}

#if defined(WINRT_FORCE_INCLUDE_DATABUFFER_XAML_G_H) || __has_include("Network.DataBuffer.xaml.g.h")

#include "Network.DataBuffer.xaml.g.h"

#else

namespace winrt::RealtimeStreaming::Network::implementation
{
    template <typename D, typename... I>
    using DataBufferT = DataBuffer_base<D, I...>;
}

#endif
