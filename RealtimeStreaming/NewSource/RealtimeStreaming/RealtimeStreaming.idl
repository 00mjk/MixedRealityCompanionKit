// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

    /*
namespace RealtimeStreaming
{
        cpp_quote("#ifndef MODULE_HANDLE")
            cpp_quote("typedef UINT32 MODULE_HANDLE;")
            cpp_quote("#define MODULE_HANDLE_INVALID (UINT)0x0bad")
            cpp_quote("#define MODULE_HANDLE_START (UINT)0x0bae")
        cpp_quote("#endif // MODULE_HANDLE")

        cpp_quote("const ULONG c_cbReceiveBufferSize = 2 * 1024;")
        cpp_quote("const ULONG c_cbMaxBundleSize = 1024 * 1024;")
        cpp_quote("const UINT16 c_cbMaxBufferFailures = 7;")
        cpp_quote("const UINT16 c_cbMaxBundleFailures = 3;")
        cpp_quote("extern wchar_t const __declspec(selectany)c_szNetworkScheme[] = L\"mrvc\";")
        cpp_quote("extern wchar_t const __declspec(selectany)c_szNetworkSchemeWithColon[] = L\"mrvc:\";")
}
*/

// Forward Declare
namespace RealtimeStreaming
{
    typedef enum PayloadType PayloadType;
    typedef enum SampleFlags SampleFlags;

    typedef struct PayloadHeader PayloadHeader;
    typedef struct MediaTypeDescription MediaTypeDescription;
    typedef struct MediaSampleHeader MediaSampleHeader;
    typedef struct MediaStreamTick MediaStreamTick;
}

// interface defines
namespace RealtimeStreaming
{

    // enums
    [version(1.0)]
    enum PayloadType
    {
        Unknown,
        State_Scene,
        State_Input,
        State_CaptureReady,
        State_CaptureStarted,
        State_CaptureStopped,
        RequestMediaDescription,
        RequestMediaStart,
        RequestMediaStop,
        RequestMediaCaptureStart,
        RequestMediaCaptureRecord,
        RequestMediaCaptureStop,
        RequestMediaEncodeStart,
        RequestMediaEncodeStop,
        SendMediaDescription,
        SendMediaSample,
        SendMediaStreamTick,
        SendFormatChange,
        ENDOFLIST
    };

    [version(1.0)]
    enum SampleFlags
    {
        SampleFlag_BottomFieldFirst = 0,
        SampleFlag_CleanPoint = 1,
        SampleFlag_DerivedFromTopField = 2,
        SampleFlag_Discontinuity = 3,
        SampleFlag_Interlaced = 4,
        SampleFlag_RepeatFirstField = 5,
        SampleFlag_SingleField = 6
    };

    // structs
    [version(1.0)]
    struct PayloadHeader
    {
        PayloadType ePayloadType;
        UInt32 cbPayloadSize;
    };

    [version(1.0)]
    struct MediaDescription
    {
        UInt32 StreamCount;
        UInt32 StreamTypeHeaderSize;
    };

    [version(1.0)]
    struct MediaTypeDescription
    {
        Guid guiMajorType;
        Guid guiSubType;
        UInt32 dwStreamId;
        UInt32 AttributesBlobSize;
    };

    [version(1.0)]
    struct MediaSampleHeader
    {
        UInt32 dwStreamId;
        UInt64 hnsTimestamp;
        UInt64 hnsDuration;
        UInt32 dwFlags;
        UInt32 dwFlagMasks;
        UInt32 cbCameraDataSize;
    };

    [version(1.0)]
    struct MediaStreamTick
    {
        UInt32 dwStreamId;
        UInt64 hnsTimestamp;
        UInt32 cbAttributesSize;
    };
}
