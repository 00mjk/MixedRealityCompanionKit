// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.180227.3

#pragma once
#include "winrt/base.h"

WINRT_WARNING_PUSH

static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.180227.3"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/impl/Windows.Perception.Spatial.2.h"
#include "winrt/impl/CameraCapture.Plugin.2.h"

namespace winrt::impl {

template <typename D> HRESULT consume_CameraCapture_Plugin_ICaptureEngine<D>::StartPreview(uint32_t width, uint32_t height, bool enableAudio, bool enableMrc) const
{
    HRESULT result{};
    check_hresult(WINRT_SHIM(CameraCapture::Plugin::ICaptureEngine)->StartPreview(width, height, enableAudio, enableMrc, put_abi(result)));
    return result;
}

template <typename D> HRESULT consume_CameraCapture_Plugin_ICaptureEngine<D>::StopPreview() const
{
    HRESULT result{};
    check_hresult(WINRT_SHIM(CameraCapture::Plugin::ICaptureEngine)->StopPreview(put_abi(result)));
    return result;
}

template <typename D> Windows::Perception::Spatial::SpatialCoordinateSystem consume_CameraCapture_Plugin_ICaptureEngine<D>::AppCoordinateSystem() const
{
    Windows::Perception::Spatial::SpatialCoordinateSystem result{ nullptr };
    check_hresult(WINRT_SHIM(CameraCapture::Plugin::ICaptureEngine)->get_AppCoordinateSystem(put_abi(result)));
    return result;
}

template <typename D> void consume_CameraCapture_Plugin_ICaptureEngine<D>::AppCoordinateSystem(Windows::Perception::Spatial::SpatialCoordinateSystem const& value) const
{
    check_hresult(WINRT_SHIM(CameraCapture::Plugin::ICaptureEngine)->put_AppCoordinateSystem(get_abi(value)));
}

template <typename D> void consume_CameraCapture_Plugin_IModule<D>::Shutdown() const
{
    check_hresult(WINRT_SHIM(CameraCapture::Plugin::IModule)->Shutdown());
}

template <typename D> void consume_CameraCapture_Plugin_IModule<D>::OnRenderEvent(uint16_t frameNumber) const
{
    check_hresult(WINRT_SHIM(CameraCapture::Plugin::IModule)->OnRenderEvent(frameNumber));
}

template <typename D>
struct produce<D, CameraCapture::Plugin::ICaptureEngine> : produce_base<D, CameraCapture::Plugin::ICaptureEngine>
{
    HRESULT __stdcall StartPreview(uint32_t width, uint32_t height, bool enableAudio, bool enableMrc, HRESULT* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<HRESULT>(this->shim().StartPreview(width, height, enableAudio, enableMrc));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall StopPreview(HRESULT* result) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            *result = detach_from<HRESULT>(this->shim().StopPreview());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall get_AppCoordinateSystem(void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            *result = detach_from<Windows::Perception::Spatial::SpatialCoordinateSystem>(this->shim().AppCoordinateSystem());
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall put_AppCoordinateSystem(void* value) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().AppCoordinateSystem(*reinterpret_cast<Windows::Perception::Spatial::SpatialCoordinateSystem const*>(&value));
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

template <typename D>
struct produce<D, CameraCapture::Plugin::IModule> : produce_base<D, CameraCapture::Plugin::IModule>
{
    HRESULT __stdcall Shutdown() noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().Shutdown();
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }

    HRESULT __stdcall OnRenderEvent(uint16_t frameNumber) noexcept final
    {
        try
        {
            typename D::abi_guard guard(this->shim());
            this->shim().OnRenderEvent(frameNumber);
            return S_OK;
        }
        catch (...)
        {
            return to_hresult();
        }
    }
};

template <typename D>
struct produce<D, CameraCapture::Plugin::IModuleFactory> : produce_base<D, CameraCapture::Plugin::IModuleFactory>
{};

}

WINRT_EXPORT namespace winrt::CameraCapture::Plugin {

inline CaptureEngine::CaptureEngine() :
    CaptureEngine(get_activation_factory<CaptureEngine>().ActivateInstance<CaptureEngine>())
{}

}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::CameraCapture::Plugin::ICaptureEngine> : winrt::impl::hash_base<winrt::CameraCapture::Plugin::ICaptureEngine> {};
template<> struct hash<winrt::CameraCapture::Plugin::IModule> : winrt::impl::hash_base<winrt::CameraCapture::Plugin::IModule> {};
template<> struct hash<winrt::CameraCapture::Plugin::IModuleFactory> : winrt::impl::hash_base<winrt::CameraCapture::Plugin::IModuleFactory> {};
template<> struct hash<winrt::CameraCapture::Plugin::CaptureEngine> : winrt::impl::hash_base<winrt::CameraCapture::Plugin::CaptureEngine> {};
template<> struct hash<winrt::CameraCapture::Plugin::Module> : winrt::impl::hash_base<winrt::CameraCapture::Plugin::Module> {};

}

WINRT_WARNING_POP
