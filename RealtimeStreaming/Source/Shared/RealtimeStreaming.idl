// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.


/*
import "AsyncInfo.idl";
import "EventToken.idl";
import "Windows.Foundation.idl";
import "Windows.Foundation.Numerics.idl";
import "Windows.Media.idl";
import "Windows.Networking.Sockets.idl";
import "Windows.Storage.idl";
import "Windows.Storage.Streams.idl";
*/

// Additional imports to ensure that all required headers are included

namespace RealtimeStreaming
{
    
/*
    cpp_quote("#ifndef MODULE_HANDLE")
        cpp_quote("typedef UINT32 MODULE_HANDLE;")
        cpp_quote("#define MODULE_HANDLE_INVALID (UINT)0x0bad")
        cpp_quote("#define MODULE_HANDLE_START (UINT)0x0bae")
    cpp_quote("#endif // MODULE_HANDLE")

    cpp_quote("const ULONG c_cbReceiveBufferSize = 2 * 1024;")
    cpp_quote("const ULONG c_cbMaxBundleSize = 1024 * 1024;")
    cpp_quote("const UINT16 c_cbMaxBufferFailures = 7;")
    cpp_quote("const UINT16 c_cbMaxBundleFailures = 3;")
    cpp_quote("extern wchar_t const __declspec(selectany)c_szNetworkScheme[] = L\"mrvc\";")
    cpp_quote("extern wchar_t const __declspec(selectany)c_szNetworkSchemeWithColon[] = L\"mrvc:\";")
*/
}

/*
cpp_quote("#ifdef __cplusplus")
cpp_quote("namespace RealtimeStreaming { namespace Network {")
cpp_quote("typedef ABI::Windows::Foundation::ITypedEventHandler<ABI::Windows::Networking::Sockets::StreamSocketListener*, ABI::Windows::Networking::Sockets::StreamSocketListenerConnectionReceivedEventArgs*> IConnectionReceivedEventHandler;")
cpp_quote("}}")
cpp_quote("#endif //__cplusplus")
*/

// Forward Declare
namespace RealtimeStreaming
{
    typedef enum PayloadType PayloadType;
    typedef enum SampleFlags SampleFlags;

    typedef struct PayloadHeader PayloadHeader;
    typedef struct MediaTypeDescription MediaTypeDescription;
    typedef struct MediaSampleHeader MediaSampleHeader;
    typedef struct MediaStreamTick MediaStreamTick;
}

namespace RealtimeStreaming { namespace Media {
    
    interface IMrvcSchemeHandler;
    runtimeclass MrvcSchemeHandler;
} }

// interface defines
namespace RealtimeStreaming {

    // enums
    [version(1.0)]
    enum PayloadType
    {
        Unknown,
        State_Scene,
        State_Input,
        State_CaptureReady,
        State_CaptureStarted,
        State_CaptureStopped,
        RequestMediaDescription,
        RequestMediaStart,
        RequestMediaStop,
        RequestMediaCaptureStart,
        RequestMediaCaptureRecord,
        RequestMediaCaptureStop,
        RequestMediaEncodeStart,
        RequestMediaEncodeStop,
        SendMediaDescription,
        SendMediaSample,
        SendMediaStreamTick,
        SendFormatChange,
        ENDOFLIST
    };

    [version(1.0)]
    enum SampleFlags
    {
        SampleFlag_BottomFieldFirst = 0,
        SampleFlag_CleanPoint = 1,
        SampleFlag_DerivedFromTopField = 2,
        SampleFlag_Discontinuity = 3,
        SampleFlag_Interlaced = 4,
        SampleFlag_RepeatFirstField = 5,
        SampleFlag_SingleField = 6
    };

    // structs
    [version(1.0)]
    struct PayloadHeader
    {
        PayloadType ePayloadType;
        DWORD cbPayloadSize;
    };

    [version(1.0)]
    struct MediaDescription
    {
        DWORD StreamCount;
        DWORD StreamTypeHeaderSize;
    };

    [version(1.0)]
    struct MediaTypeDescription
    {
        GUID guiMajorType;
        GUID guiSubType;
        DWORD dwStreamId;
        UINT32 AttributesBlobSize;
    };

    [version(1.0)]
    struct MediaSampleHeader
    {
        DWORD dwStreamId;
        LONGLONG hnsTimestamp;
        LONGLONG hnsDuration;
        DWORD dwFlags;
        DWORD dwFlagMasks;
        DWORD cbCameraDataSize;
    };

    [version(1.0)]
    struct MediaStreamTick
    {
        DWORD dwStreamId;
        LONGLONG hnsTimestamp;
        UINT32 cbAttributesSize;
    };
}

/*
namespace RealtimeStreaming{ namespace Media {

    [version(1.0)]
    enum AudioMixerMode
    {
        Mic = 0,
        Loopback = 1,
        MicAndLoopback = 2
    };

    // MrvcSchemeHandler
    [exclusiveto(RealtimeStreaming.Media.MrvcSchemeHandler)]
    [uuid(5a4a9427-1f66-40c6-ad6a-b3df73370112)]
    [version(1.0)]
    interface IMrvcSchemeHandler : IInspectable requires
        Windows.Media.IMediaExtension
    {
        [propget] HRESULT Connection(
            [out][retval] RealtimeStreaming.Network.Connection** connection);
        [propput] HRESULT Connection(
            [in] RealtimeStreaming.Network.Connection* connection);
    };

    [activatable(1.0)]
    [marshaling_behavior(agile)]
    [threading(both)]
    [version(1.0)]
    runtimeclass MrvcSchemeHandler
    {
        [default] interface Windows.Media.IMediaExtension;
        interface IMrvcSchemeHandler;
    };
} }
*/